CS 490 Exam 1 Study Guide
GENERAL GUIDELINES:  
Review your notes and the textbook.  Use the Power Points as a guideline for 
what to study, but don’t limit your study to the Power Points alone.  
Information from any Power Points that aren’t discussed in class won’t be on the
test.  Check out the summary at the end of each chapter as well as the chapter 
review questions..

Review homework; be able to work similar problems, know the material in written answers.
Learn to prioritize; not every item is of equal importance.  For example, 
understanding concurrency and the need for mutual exclusion is more important 
than knowing what a mailbox is.  If you have questions about any of the items 
below, please ask in class on Tuesday or email me about them.  If are unsure 
about something other students probably will be as well and it will be helpful 
to everyone to discuss it in class.

********************************************************************************
Chapter 1: Computer System Overview
********************************************************************************
Program Counter (PC) - holds the address of the next instruction to be fetched.
Unless instructed otherwise, the processor always increments the PC after each
instruction fetch.

Instruction Register - The register that contains the instruction that will currently
be executed.

Memory Address Register (MAR) - an internal register of the processor, which specifies
the address in memory for the next read/write.

Memory Buffer Register (MBR) - an internal register of the processor, which contains
the data to be written into memory or which receives the data read from memory.

*********************************
Basic instruction execution cycle
*********************************
Fetch -> Decode -> Execute -> Store (writeback)

*********************************
execution cycle with interrupts
*********************************
Fetch -> Decode -> Execute -> Check for interrupts
                      |
                    Halt

Motivation for Multi-programming - multi-programming allows the processor to be more
efficient by reducing the processor's idle time.  Multi-programming allows one process
to run while another process is blocked (doing an I/O operation).

Interrupts - provided primarily as a way to improve processor utilization.

***********************
4 Classes of Interrupts
***********************
Program - generated by an illegal instruction such as dividing by 0, arithmetic overflow,
reference outside a user's allowed memory space, etc.

Timer - Timer within processor that allows the OS to perform certain functions on a regular basis.

I/O - generated by an I/O controller, to signal normal completion of an operation or to signal
a variety of error conditions.

Hardware failure - power, memory parity error, etc.

****************
Memory Hierarchy
****************
Memory Hierarchy from fastest (most expensive per bit) to slowest (cheapest per bit)
1. Onboard memory: registers, cache, main memory
2. Outboard memory: HDD, optical drive
3. Off line storage: tape drive

Hit ratio - the fraction of all memory accesses that are found in the faster memory (cache)
Ts = H * T1 + ((1 - H) * (T1 + T2))
where H is the hit ratio, T1 is time to access fast memroy, T2 is time to access slow memory

Purpose of cache - Cache is used to allow faster memroy access.  cache memory is
used by placing data that is likely to be accessed in the fast memory (cache), 
allowing it to be accessed faster.

Principle of Locaility - memory references tend to cluster around certain subsets of total 
memory belonging to a program

**************************
Direct Memory Access (DMA)
**************************
The DMA is used to improve performance in a mult-programmed computer system by allowing
the reading/writing of data to an I/O device to be performed by a seperate module and not
the CPU.

The DMA module performs the I/O operations while the processor continues with other work.

*****************************************************
Symmetric Multiprocessors (SMP) vs multicore computer
*****************************************************
SMP and multicore computers both are used to provide parallelism, both divide up work among
the system

SMP has two or more processors connected by a bus.  Processors share main memory and I/O devices.
All processors can perform the same instructions, hence the term symmetric.

Multicore computer (Chip multiprocessor) - combines two or more processors (called cores) on a
single piece of silicon (called a die).  Each core consists of all the components of an independent
processor, such as registers, ALU, pipeline hardware, and control unit.  Does not need a bus to
communicate with cores.

********************************************************************************
Chapter 2: Operating System Overview
********************************************************************************

*************************
Three Objectives of an OS
*************************
1. Convenience - Hardware/software marry/manage user interface
2. Efficiency - control of system resources, schedule tasks and processes
3. Ability to evolve - change with hardware, new services, fixes

OS Kernel - Intermediate step between software applications (processes) and the system's hardware.
Contains the most frequently used functions in the OS and, other parts of the OS currently in use.

*******************************************************************************************
Important features (originally introduced in batch processing) for multi-programmed systems
*******************************************************************************************
1.  Memory Protection - The user program must not alter the memory area containing the monitor
2.  Timer - used to prevent a single process from monopolizing the system. If the timer for a
    job expires, the program is stopped and the monitor resumes control.
3.  Privileged Instructions - Prevents user programs from doing certain instructions that may
    cause problems such as an I/O instruction. If the user program wishes to do a privileged
    instruction, it must request that the monitor perform the operation.
4.  Interrupts - Allows the flow of control from systems to user and vice versa.

User Mode - user programs execute in this mode.  Certain areas of memory are protected from use
and certain instructions may not be executed.

Kernel mode - Monitor executes in this mode.  Privileged instructions may be executed and protected
areas of memory can be accessed.

*********************************************
batch multiprocessing vs time sharing systems
*********************************************
batch multiprocessing is used to maximize the processor's use, by having one process work while
another process waits for I/O.

Time sharing systems are used for interactive jobs while processor time is shared between multiple
users.  The OS executes each user programs in short bursts giving the illusion of speed.

time slicing - at each clock interrupt OS regains control and could assign the processor to another 
user in a time sharing system.

Process - a program in execution.  A collection of one or more threads and associated system resources.

execution context (process state) - the internal data by which the OS is able to supervise and control
the process.

Thread - a process can be broken down into multiple concurrent threads that execute cooperatively to perform the
work of the process.

***********************************
interleaved vs overlapped execution
***********************************
Interleaving execution - interleaving the execution steps of each process via time slices: only one process runs
at a time, and if it does not complete during its time slice, it is paused, another process begins or resumes, and
then later the original process is resumed. In this way multiple processes are part-way through execution at a single
instant, but only one process is being executed at that instant.

Overlapping execution - overlapping of execution on a multiprocessor computer.  Processes are literally executed at the
same time, but with different processors.

********************************************************************************
Chapter 3: Processes
********************************************************************************

